// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(MyAviaryDbContext))]
    [Migration("20211025191225_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Food")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Birds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8606c209-1d51-4ee3-9f8d-8de3d0f3f24e"),
                            CageId = new Guid("2fb04232-9775-4ef8-bb2d-cc1c0296e84c"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie1.jpg",
                            Name = "Jake",
                            SpeciesId = new Guid("dbcebceb-24ee-4477-8a09-7042512f1f6d"),
                            UserId = new Guid("5e146a05-34ec-4ff0-8dde-6dc6d62c3591")
                        },
                        new
                        {
                            Id = new Guid("6668e055-e99c-4b50-ad12-5a28ca2ad422"),
                            CageId = new Guid("2fb04232-9775-4ef8-bb2d-cc1c0296e84c"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2017, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie2.jpg",
                            Name = "Holly",
                            SpeciesId = new Guid("dbcebceb-24ee-4477-8a09-7042512f1f6d"),
                            UserId = new Guid("5e146a05-34ec-4ff0-8dde-6dc6d62c3591")
                        },
                        new
                        {
                            Id = new Guid("8e74a018-6d85-4e2a-bb85-f8da2d58f3bf"),
                            CageId = new Guid("aba63d5f-8dd1-42e3-93b8-898c71554e5a"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2012, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel1.jpg",
                            Name = "Steven",
                            SpeciesId = new Guid("5894d41b-e7c2-4125-8a66-92c802bf8ed2"),
                            UserId = new Guid("334cd0db-6111-4a42-9f4d-6af33fe6283b")
                        },
                        new
                        {
                            Id = new Guid("8470bc8b-28ac-4e51-9faf-4fcf4c5f0d14"),
                            CageId = new Guid("aba63d5f-8dd1-42e3-93b8-898c71554e5a"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2014, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel2.jpg",
                            Name = "July",
                            SpeciesId = new Guid("5894d41b-e7c2-4125-8a66-92c802bf8ed2"),
                            UserId = new Guid("334cd0db-6111-4a42-9f4d-6af33fe6283b")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BirdMedicines", b =>
                {
                    b.Property<Guid>("BirdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BirdId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("BirdMedicine");

                    b.HasData(
                        new
                        {
                            BirdId = new Guid("6668e055-e99c-4b50-ad12-5a28ca2ad422"),
                            MedicineId = new Guid("44411f0e-5e99-49b4-9beb-922d3a97093d")
                        },
                        new
                        {
                            BirdId = new Guid("8e74a018-6d85-4e2a-bb85-f8da2d58f3bf"),
                            MedicineId = new Guid("eb6e6128-25cf-4b4b-b511-fce4a801d1f0")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fb04232-9775-4ef8-bb2d-cc1c0296e84c"),
                            Image = "images/cage/cage1.png",
                            Location = "Outside",
                            Name = "Outside Cage 1",
                            UserId = new Guid("5e146a05-34ec-4ff0-8dde-6dc6d62c3591")
                        },
                        new
                        {
                            Id = new Guid("aba63d5f-8dd1-42e3-93b8-898c71554e5a"),
                            Image = "images/cage/cage2.png",
                            Location = "Outside",
                            Name = "Outside Cage 2",
                            UserId = new Guid("334cd0db-6111-4a42-9f4d-6af33fe6283b")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc063e36-6a74-429d-9569-97838a06ede7"),
                            CageId = new Guid("aba63d5f-8dd1-42e3-93b8-898c71554e5a"),
                            IsDone = false,
                            Name = "Refill water"
                        },
                        new
                        {
                            Id = new Guid("2fb04232-9775-4ef8-bb2d-cc1c0296e84c"),
                            CageId = new Guid("aba63d5f-8dd1-42e3-93b8-898c71554e5a"),
                            IsDone = true,
                            Name = "Clean branches"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb6e6128-25cf-4b4b-b511-fce4a801d1f0"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("5e146a05-34ec-4ff0-8dde-6dc6d62c3591")
                        },
                        new
                        {
                            Id = new Guid("44411f0e-5e99-49b4-9beb-922d3a97093d"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("5e146a05-34ec-4ff0-8dde-6dc6d62c3591")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5894d41b-e7c2-4125-8a66-92c802bf8ed2"),
                            Name = "Cockatiel",
                            ScientificName = "Nymphicus hollandicuss"
                        },
                        new
                        {
                            Id = new Guid("dbcebceb-24ee-4477-8a09-7042512f1f6d"),
                            Name = "Budgerigar",
                            ScientificName = "Melopsittacus undulatus"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e146a05-34ec-4ff0-8dde-6dc6d62c3591"),
                            Name = "Franchois"
                        },
                        new
                        {
                            Id = new Guid("334cd0db-6111-4a42-9f4d-6af33fe6283b"),
                            Name = "Dequinnemaere"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("Birds")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.Species", "Species")
                        .WithMany("Birds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Birds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BirdMedicines", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Bird", "Bird")
                        .WithMany("BirdMedicines")
                        .HasForeignKey("BirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Medicine", "Medicine")
                        .WithMany("BirdMedicine")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Cages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("DailyTasks")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Medicine", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Medicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
