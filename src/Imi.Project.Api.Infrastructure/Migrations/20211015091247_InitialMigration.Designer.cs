// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211015091247_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PairId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("FoodId");

                    b.HasIndex("PairId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Birds");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.ToTable("DailyTasks");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Nest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PairId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PairId")
                        .IsUnique()
                        .HasFilter("[PairId] IS NOT NULL");

                    b.ToTable("Nests");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Pair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("Birds")
                        .HasForeignKey("CageId");

                    b.HasOne("Imi.Project.Api.Core.Entities.Food", "Food")
                        .WithMany("Birds")
                        .HasForeignKey("FoodId");

                    b.HasOne("Imi.Project.Api.Core.Entities.Pair", "Pair")
                        .WithMany("Birds")
                        .HasForeignKey("PairId");

                    b.HasOne("Imi.Project.Api.Core.Entities.Species", "Species")
                        .WithMany("Birds")
                        .HasForeignKey("SpeciesId");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Cages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("DailyTasks")
                        .HasForeignKey("CageId");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Nest", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Pair", "Pair")
                        .WithOne("Nest")
                        .HasForeignKey("Imi.Project.Api.Core.Entities.Nest", "PairId");
                });
#pragma warning restore 612, 618
        }
    }
}
