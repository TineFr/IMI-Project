// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(MyAviaryDbContext))]
    [Migration("20211123135915_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5db91938-eb62-4aeb-be66-bc37c6383674",
                            DateOfBirth = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tine.franchois@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tine",
                            LockoutEnabled = false,
                            Name = "Franchois",
                            NormalizedEmail = "TINE.FRANCHOIS@GMAIL.COM",
                            NormalizedUserName = "TINE.FRANCHOIS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENtF3ZDGfiLgf8rIdlQsUKgLQKKHjXDExj1RbWJrwN3gel8pQK9MRFajHJvqeQN8NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4f385e9-d1c0-4339-95dd-0a5da4e6fb58",
                            TwoFactorEnabled = false,
                            UserName = "tine.franchois@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4249485b-e776-4add-8335-4833cf242204",
                            DateOfBirth = new DateTime(1997, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deq.claire@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Claire",
                            LockoutEnabled = false,
                            Name = "Dequinnemaere",
                            NormalizedEmail = "DEQ.CLAIRE@GMAIL.COM",
                            NormalizedUserName = "DEQ.CLAIRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJFYez1hx1jElk3gxnqmq/FzK0ddnT2pl9bIHxzdebMOnT3DZvmJpCoGelnEHLNuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a5cd35c-de67-46a3-9a32-208a3d826b34",
                            TwoFactorEnabled = false,
                            UserName = "deq.claire@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69235d10-768b-4bbf-b7bb-398829aa60c2",
                            DateOfBirth = new DateTime(1995, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "depotter.sander@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sander",
                            LockoutEnabled = false,
                            Name = "Depotter",
                            NormalizedEmail = "DEPOTTER.SANDER@GMAIL.COM",
                            NormalizedUserName = "DEPOTTER.SANDER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPcmI99sl0Ivfh3UdRmfTRJxhiW+kdWZnNDIrE0FPzz/mQ6L0FftnR1Vf3CU7f0k+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a5e34f9-ce92-4fc6-b031-670d775dc683",
                            TwoFactorEnabled = false,
                            UserName = "depotter.sander@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17f353c6-a80e-4156-96a9-512d985468a4",
                            DateOfBirth = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haenebalcke.niels@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Niels",
                            LockoutEnabled = false,
                            Name = "Haenebalcke",
                            NormalizedEmail = "HAENEBALCKE.NIELS@GMAIL.COM",
                            NormalizedUserName = "HAENEBALCKE.NIELS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECafCJd27pIondpuPPqgrrWiPKBXl2mEZxm+qODdeDMxIbHE6wFrGx/NsCpAyvTC/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4a324df-4418-444c-bdb7-e30f38d6d2f3",
                            TwoFactorEnabled = false,
                            UserName = "haenebalcke.niels@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6450601b-1242-42df-93fb-f21ef15d955b",
                            DateOfBirth = new DateTime(1996, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jochem.dewandel@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jochem",
                            LockoutEnabled = false,
                            Name = "Dewandel",
                            NormalizedEmail = "JOCHEM.DEWANDEL@GMAIL.COM",
                            NormalizedUserName = "JOCHEM.DEWANDEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEpJW1FJltKDF44KeDIQpQ3wuSQiWlebmpalKXy/Bi62YKfERtlcDcvPCyQbpEyf0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36bea262-cc88-4879-bc31-ba7cc47fd20f",
                            TwoFactorEnabled = false,
                            UserName = "jochem.dewandel@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32147395-6dea-4455-b7fd-44206d82fc63",
                            DateOfBirth = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jonas.desmet@telenet.be",
                            EmailConfirmed = false,
                            FirstName = "Jonas",
                            LockoutEnabled = false,
                            Name = "DeSmet",
                            NormalizedEmail = "JONAS.DESMET@TELENET.BE",
                            NormalizedUserName = "JONAS.DESMET@TELENET.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEKrQpYxALelhx8SwC6Gm96l4KC1vhEci19S0AN+ncJ045Q7flo1w2ylvhcOntCmcNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fe43f00-f882-463b-8836-1246a5edf272",
                            TwoFactorEnabled = false,
                            UserName = "jonas.desmet@telenet.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88caa3fd-f4a1-4ac5-81d3-a1e30a625cfa",
                            DateOfBirth = new DateTime(1997, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "niels.verbeke@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Niels",
                            LockoutEnabled = false,
                            Name = "Verbeke",
                            NormalizedEmail = "NIELS.VERBEKE@HOTMAIL.COM",
                            NormalizedUserName = "NIELS.VERBEKE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5KwArlNi1/X922wtsLImJhjywDle/tEfWHLxwJpinDttUBCDjhaFlzzk9idylD7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bdceb62-fef2-4f76-bd8e-82ee9b32184c",
                            TwoFactorEnabled = false,
                            UserName = "niels.verbeke@hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1284fef1-fdc5-4448-9826-7e9fc22aabe7",
                            DateOfBirth = new DateTime(1970, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ann.meerpoel@skynet.be",
                            EmailConfirmed = false,
                            FirstName = "Ann",
                            LockoutEnabled = false,
                            Name = "Meerpoel",
                            NormalizedEmail = "ANN.MEERPOEL@SKYNET.BE",
                            NormalizedUserName = "ANN.MEERPOEL@SKYNET.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEB/qjmhDfGOEWreRE1ItIqTgjcoY7fnIs1dEQnEPgXehV1YafnLEdBh1u0aWWelb4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a797fc94-03e8-42de-a6f1-34c575a3952c",
                            TwoFactorEnabled = false,
                            UserName = "ann.meerpoel@skynet.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bb9b634-205a-4734-ab79-5adc9e0c8505",
                            DateOfBirth = new DateTime(1972, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lotens.jurgen@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jurgen",
                            LockoutEnabled = false,
                            Name = "Lotens",
                            NormalizedEmail = "LOTENS.JURGEN@HOTMAIL.COM",
                            NormalizedUserName = "LOTENS.JURGEN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENqdneEw/UMJlcmFfqBRyf5bFF5+0ZsQEmd14UoB0fkvfLBlzD1Gy+/bvcTm2xPLpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5b5b388-727b-43b7-93d8-6c8feee634cf",
                            TwoFactorEnabled = false,
                            UserName = "lotens.jurgen@hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69c686b4-9593-4fc4-bb79-c28bdf6c7011",
                            DateOfBirth = new DateTime(2010, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janne.vhl@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Janne",
                            LockoutEnabled = false,
                            Name = "Van Horelbeke",
                            NormalizedEmail = "JANNE.VHL@GMAIL.COM",
                            NormalizedUserName = "JANNE.VHL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENmwk0THxdgawme8Sj6p6qNlAjH7The69NwS5whg8kduZNHTqMNW29tttQhtbJ2B8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07f14a70-7ebb-474d-9f49-fed5845cf52c",
                            TwoFactorEnabled = false,
                            UserName = "janne.vhl@gmail.com"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Food")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Birds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie1.jpg",
                            Name = "Jake",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Gender = 1,
                            HatchDate = new DateTime(2017, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie2.jpg",
                            Name = "Holly",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2012, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel1.jpg",
                            Name = "Steven",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2014, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel2.jpg",
                            Name = "July",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2014, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel3.jpg",
                            Name = "June",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2014, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel4.jpg",
                            Name = "Jupiter",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Food = "Birdseed",
                            Gender = 0,
                            HatchDate = new DateTime(2019, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/zebrafinch1.jpg",
                            Name = "Flynn",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Food = "Birdseed",
                            Gender = 1,
                            HatchDate = new DateTime(2018, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/zebrafinch2.jpg",
                            Name = "Keira",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Food = "Canary Seed",
                            Gender = 1,
                            HatchDate = new DateTime(2015, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/canary1.jpg",
                            Name = "Connie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Food = "Parrot Food",
                            Gender = 0,
                            HatchDate = new DateTime(2010, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/pacificparrotlet1.jpg",
                            Name = "Parro",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2012, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/bourkesparakeet1.jpg",
                            Name = "Bourkie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Food = "Parrot food",
                            Gender = 1,
                            HatchDate = new DateTime(2011, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/lovebird1.jpg",
                            Name = "Rosie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000007"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Food = "Parrot food",
                            Gender = 0,
                            HatchDate = new DateTime(2011, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/lovebird2.jpg",
                            Name = "Birdo",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000007"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Food = "Classic Avi-Cakes for Small Birds",
                            Gender = 0,
                            HatchDate = new DateTime(2012, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/greencheekedconure1.jpg",
                            Name = "Cheeky",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000008"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Food = "Birdseed",
                            Gender = 1,
                            HatchDate = new DateTime(2021, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/goldianfinch1.jpg",
                            Name = "Goldie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000009"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Food = "Birdseed",
                            Gender = 1,
                            HatchDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/societyfinch1.jpg",
                            Name = "Lily",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000010"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BirdPrescription", b =>
                {
                    b.Property<Guid>("BirdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BirdId", "PrescriptionId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("BirdPrescriptions");

                    b.HasData(
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000013")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "images/cage/cage1.png",
                            Location = "Outside",
                            Name = "Outside Cage 1",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Image = "images/cage/cage2.png",
                            Location = "Outside",
                            Name = "Outside Cage 2",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Image = "images/cage/cage3.jpg",
                            Location = "Living room",
                            Name = "White Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Image = "images/cage/cage4.jpg",
                            Location = "Study room",
                            Name = "Desk Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Image = "images/cage/cage9.jpg",
                            Location = "Living room",
                            Name = "Gold Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Image = "images/cage/cage6.jpg",
                            Location = "Kitchen",
                            Name = "House-shaped Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Image = "images/cage/cage7.jpg",
                            Location = "Dining room",
                            Name = "Small Black Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Image = "images/cage/cage8.jpg",
                            Location = "Dining room",
                            Name = "Mansion Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Image = "images/cage/cage5.jpg",
                            Location = "Outside",
                            Name = "Pink Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Image = "images/cage/cage10.png",
                            Location = "Outside",
                            Name = "Vintage Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Refill water",
                            IsDone = false
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Amoxicillin 10% ",
                            Usage = "administer 1 teaspoon per 1 gallon of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Amtyl",
                            Usage = "Mix 3g into 2 teaspoons of water and give 1ml of solution per 100grams of body weight.",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Aureomycin",
                            Usage = "1/4 teaspoon to 1 quart of water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Penicillin",
                            Usage = "Mix 1/4 teaspoon to 1 gallon of water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Calciboost",
                            Usage = "In water (10-20 mls per liter) or on soft-food 0.1-0.2 mls per 100g bodyweight. ",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "CocciPlus",
                            Usage = "use 1/2 teaspoon to 1 gallon of water.",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Colloidal Silver",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Doxyvet Liquid",
                            Usage = "Use at the rate of 1ml (20 drops) in 100ml of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Endocox Powder",
                            Usage = "1 teaspoon (5 grams) per 1 gallon of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Name = "Enrofloxacin 10%",
                            Usage = "Mix 1 tsp. per 1 Gallon of water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            EndDate = new DateTime(2021, 11, 30, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5335),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 588, DateTimeKind.Local).AddTicks(4190),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            EndDate = new DateTime(2021, 11, 27, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5644),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000002"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5629),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            EndDate = new DateTime(2021, 11, 30, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5756),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000003"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5752),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            EndDate = new DateTime(2021, 11, 27, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5767),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000004"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5764),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            EndDate = new DateTime(2021, 11, 29, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5776),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000005"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5773),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            EndDate = new DateTime(2021, 11, 27, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5785),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000006"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5782),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            EndDate = new DateTime(2021, 11, 25, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5794),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000007"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5791),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            EndDate = new DateTime(2021, 12, 4, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5803),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000008"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5800),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            EndDate = new DateTime(2021, 11, 28, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5812),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000009"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5809),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            EndDate = new DateTime(2021, 11, 27, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5821),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000010"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5818),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            EndDate = new DateTime(2021, 11, 27, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5833),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000011"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5831),
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            EndDate = new DateTime(2021, 11, 30, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5842),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000012"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5840),
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            EndDate = new DateTime(2021, 11, 27, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5851),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000013"),
                            StartDate = new DateTime(2021, 11, 23, 14, 59, 15, 591, DateTimeKind.Local).AddTicks(5848),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Cockatiel",
                            ScientificName = "Nymphicus hollandicuss"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Budgerigar",
                            ScientificName = "Melopsittacus undulatus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Zebra finch",
                            ScientificName = "Taeniopygia guttata"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Canary",
                            ScientificName = "Serinus canaria forma domestica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Pacific parrotlet",
                            ScientificName = "Forpus coelestis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Bourke’s parrot",
                            ScientificName = "Neopsephotus bourkii"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Rosy-faced lovebrid",
                            ScientificName = "Agapornis roseicollis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Green-Cheeked Conure",
                            ScientificName = "Pyrrhura molinae"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Gouldian finch",
                            ScientificName = "Chloebia gouldiae"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Society finch",
                            ScientificName = "Lonchura striata domestica"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "968e110d-985c-460e-9e7b-3fe432b01e74",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "2948b3ce-72f8-45be-ba3d-f45b9e28b948",
                            Name = "BaseUser",
                            NormalizedName = "BASEUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("Birds")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.Species", "Species")
                        .WithMany("Birds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Birds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BirdPrescription", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Bird", "Bird")
                        .WithMany("BirdPrescriptions")
                        .HasForeignKey("BirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Prescription", "Prescription")
                        .WithMany("BirdPrescriptions")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Cages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("DailyTasks")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Medicine", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Medicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Prescription", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
