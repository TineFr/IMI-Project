// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(MyAviaryDbContext))]
    [Migration("20220106232625_AddSpeciesSeeding")]
    partial class AddSpeciesSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7153f222-58c9-49fa-994c-8c824e3d2958",
                            DateOfBirth = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tine.franchois@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tine",
                            LockoutEnabled = false,
                            Name = "Franchois",
                            NormalizedEmail = "TINE.FRANCHOIS@GMAIL.COM",
                            NormalizedUserName = "TINE.FRANCHOIS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAOaXdiP6v+EKaXeZhYilq0v78PncSXJ+ORJfOdy65A5ouy+3v4qDzPyneUimWX8BA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02f1c0a3-f9aa-4d4d-8ad3-f3ff0c7d0a2b",
                            TwoFactorEnabled = false,
                            UserName = "tine.franchois@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b006016-3496-4be5-80ed-4a42f60be957",
                            DateOfBirth = new DateTime(1997, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deq.claire@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Claire",
                            LockoutEnabled = false,
                            Name = "Dequinnemaere",
                            NormalizedEmail = "DEQ.CLAIRE@GMAIL.COM",
                            NormalizedUserName = "DEQ.CLAIRE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELqVNYtpSgR/QSdd//05hZeAUcUGgv7G0PJQbHKKNHyNr5VS1oHe3qjhI9gY6uxxvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14afa922-3777-4872-90bc-6674258bd807",
                            TwoFactorEnabled = false,
                            UserName = "deq.claire@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b768c267-1eba-4356-8c8a-61876c99b1d2",
                            DateOfBirth = new DateTime(1995, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "depotter.sander@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sander",
                            LockoutEnabled = false,
                            Name = "Depotter",
                            NormalizedEmail = "DEPOTTER.SANDER@GMAIL.COM",
                            NormalizedUserName = "DEPOTTER.SANDER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOZYbtxJ2Zr5p00Jo1HgitBNogW7aAk5n2HK7PRi4vrphgJBK49GIHisatw+fwS/sQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "573672a7-6498-479d-89d1-481f01c89661",
                            TwoFactorEnabled = false,
                            UserName = "depotter.sander@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31913528-6351-4fb5-ab50-bac22e2c2aad",
                            DateOfBirth = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "haenebalcke.niels@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Niels",
                            LockoutEnabled = false,
                            Name = "Haenebalcke",
                            NormalizedEmail = "HAENEBALCKE.NIELS@GMAIL.COM",
                            NormalizedUserName = "HAENEBALCKE.NIELS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECKxN3yig16BqCRYhwTzgzkDSNau3nOpX8+BQXm+cbIPeuJEQ9mqTfNh5wt97uu2+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39979abf-c144-4050-8f64-bb419a9705c9",
                            TwoFactorEnabled = false,
                            UserName = "haenebalcke.niels@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e83ebba-115e-48c6-ab39-1766359d7794",
                            DateOfBirth = new DateTime(1996, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jochem.dewandel@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jochem",
                            LockoutEnabled = false,
                            Name = "Dewandel",
                            NormalizedEmail = "JOCHEM.DEWANDEL@GMAIL.COM",
                            NormalizedUserName = "JOCHEM.DEWANDEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBy6ZtOVx/YBpV0RltGKS68VpB7h7i8PI8LfEZs47GKZKG10qtPzxTZmSB3Np6In8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51524ace-5c1b-421e-915e-328010e2714b",
                            TwoFactorEnabled = false,
                            UserName = "jochem.dewandel@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "127498c4-7fdf-45c3-ad2a-9e0c1976c7c3",
                            DateOfBirth = new DateTime(1997, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jonas.desmet@telenet.be",
                            EmailConfirmed = false,
                            FirstName = "Jonas",
                            LockoutEnabled = false,
                            Name = "DeSmet",
                            NormalizedEmail = "JONAS.DESMET@TELENET.BE",
                            NormalizedUserName = "JONAS.DESMET@TELENET.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEEztoq0ybPolDeUnOnbj088MJ119ZbkdpBrmT7Lx+BaVpiNvUiIcDkJUzeb7q1fzkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c7815fd-ffdc-4587-9caa-03ed9706ab73",
                            TwoFactorEnabled = false,
                            UserName = "jonas.desmet@telenet.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ca7ccba-a568-41d1-8067-fed5e2cd6043",
                            DateOfBirth = new DateTime(1997, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "niels.verbeke@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Niels",
                            LockoutEnabled = false,
                            Name = "Verbeke",
                            NormalizedEmail = "NIELS.VERBEKE@HOTMAIL.COM",
                            NormalizedUserName = "NIELS.VERBEKE@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIQbUAh+XL3dTYhGITchBKQviMqIoZSMOy666kGNP5IiUcd845lGoTW4jzXVh0hh4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0e38ef4-fcff-4f2d-9c7a-b9b2383da764",
                            TwoFactorEnabled = false,
                            UserName = "niels.verbeke@hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1838d1f7-b280-4280-8d68-ce5dde4117ab",
                            DateOfBirth = new DateTime(1970, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ann.meerpoel@skynet.be",
                            EmailConfirmed = false,
                            FirstName = "Ann",
                            LockoutEnabled = false,
                            Name = "Meerpoel",
                            NormalizedEmail = "ANN.MEERPOEL@SKYNET.BE",
                            NormalizedUserName = "ANN.MEERPOEL@SKYNET.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEBi2xI6KwqifJS6RHgCfaofJ+kBgjcRZTwJxb2q6mDweb2da/zKl0DN91PJ7F0UTSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a362abd6-efa5-4201-b443-f0e31edcdfd5",
                            TwoFactorEnabled = false,
                            UserName = "ann.meerpoel@skynet.be"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b441f845-daa9-441b-82fa-0dbec56397f6",
                            DateOfBirth = new DateTime(1972, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lotens.jurgen@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jurgen",
                            LockoutEnabled = false,
                            Name = "Lotens",
                            NormalizedEmail = "LOTENS.JURGEN@HOTMAIL.COM",
                            NormalizedUserName = "LOTENS.JURGEN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7SFw7142fvEQwKy1+qetBAJN+NYbrUkDNhidMcitXW5BfegnJGj8xHEooQ1HfWVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7610cbdc-d6ad-4e48-a915-c16f9415c18c",
                            TwoFactorEnabled = false,
                            UserName = "lotens.jurgen@hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34c09c27-ea0d-4d17-a5cd-1581a880584a",
                            DateOfBirth = new DateTime(2010, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janne.vhl@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Janne",
                            LockoutEnabled = false,
                            Name = "Van Horelbeke",
                            NormalizedEmail = "JANNE.VHL@GMAIL.COM",
                            NormalizedUserName = "JANNE.VHL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMrDQIdykY5cy7gUk0F8vG46O6S3Z2kyQI4/7A5Okf79+74jxrBX74tmWXh5pb1kSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c1cdb347-20ee-492f-a75d-c6c2ca786823",
                            TwoFactorEnabled = false,
                            UserName = "janne.vhl@gmail.com"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Food")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Birds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie1.jpg",
                            Name = "Jake",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Gender = 1,
                            HatchDate = new DateTime(2017, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie2.jpg",
                            Name = "Holly",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2012, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel1.jpg",
                            Name = "Steven",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2014, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel2.jpg",
                            Name = "July",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2014, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel3.jpg",
                            Name = "June",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2014, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/cockatiel4.jpg",
                            Name = "Jupiter",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Food = "Birdseed",
                            Gender = 0,
                            HatchDate = new DateTime(2019, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/zebrafinch1.jpg",
                            Name = "Flynn",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Food = "Birdseed",
                            Gender = 1,
                            HatchDate = new DateTime(2018, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/zebrafinch2.jpg",
                            Name = "Keira",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Food = "Canary Seed",
                            Gender = 1,
                            HatchDate = new DateTime(2015, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/canary1.jpg",
                            Name = "Connie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000004"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Food = "Parrot Food",
                            Gender = 0,
                            HatchDate = new DateTime(2010, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/pacificparrotlet1.jpg",
                            Name = "Parro",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000005"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2012, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/bourkesparakeet1.jpg",
                            Name = "Bourkie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000006"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Food = "Parrot food",
                            Gender = 1,
                            HatchDate = new DateTime(2011, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/lovebird1.jpg",
                            Name = "Rosie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000007"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Food = "Parrot food",
                            Gender = 0,
                            HatchDate = new DateTime(2011, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/lovebird2.jpg",
                            Name = "Birdo",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000007"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Food = "Classic Avi-Cakes for Small Birds",
                            Gender = 0,
                            HatchDate = new DateTime(2012, 8, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/greencheekedconure1.jpg",
                            Name = "Cheeky",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000008"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Food = "Birdseed",
                            Gender = 1,
                            HatchDate = new DateTime(2021, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/goldianfinch1.jpg",
                            Name = "Goldie",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000009"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Food = "Birdseed",
                            Gender = 1,
                            HatchDate = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/societyfinch1.jpg",
                            Name = "Lily",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000010"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Food = "Parakeet mix",
                            Gender = 1,
                            HatchDate = new DateTime(2016, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie6.jpg",
                            Name = "Blue",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Food = "Parakeet mix",
                            Gender = 0,
                            HatchDate = new DateTime(2017, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "images/bird/budgie7.jpg",
                            Name = "Joey",
                            SpeciesId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BirdPrescription", b =>
                {
                    b.Property<Guid>("BirdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BirdId", "PrescriptionId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("BirdPrescriptions");

                    b.HasData(
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000004"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000005"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000006"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000007"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000008"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000010"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000009"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000011"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000011")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000016"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000012")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000013"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000013")
                        },
                        new
                        {
                            BirdId = new Guid("00000000-0000-0000-0000-000000000012"),
                            PrescriptionId = new Guid("00000000-0000-0000-0000-000000000013")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Image = "images/cage/cage1.png",
                            Location = "Outside",
                            Name = "Outside Cage 1",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Image = "images/cage/cage2.png",
                            Location = "Outside",
                            Name = "Outside Cage 2",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Image = "images/cage/cage3.jpg",
                            Location = "Living room",
                            Name = "White Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Image = "images/cage/cage4.jpg",
                            Location = "Study room",
                            Name = "Desk Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Image = "images/cage/cage9.jpg",
                            Location = "Living room",
                            Name = "Gold Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Image = "images/cage/cage6.jpg",
                            Location = "Kitchen",
                            Name = "House-shaped Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Image = "images/cage/cage7.jpg",
                            Location = "Dining room",
                            Name = "Small Black Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Image = "images/cage/cage8.jpg",
                            Location = "Dining room",
                            Name = "Mansion Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Image = "images/cage/cage5.jpg",
                            Location = "Outside",
                            Name = "Pink Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Image = "images/cage/cage10.png",
                            Location = "Outside",
                            Name = "Vintage Cage",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Image = "images/cage/cage11.jpg",
                            Location = "Living room",
                            Name = "Little Home",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.ToTable("DailyTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Clean branches",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Refill water",
                            IsDone = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Add food",
                            IsDone = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            CageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Refill water",
                            IsDone = false
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Amoxicillin 10% ",
                            Usage = "administer 1 teaspoon per 1 gallon of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Amtyl",
                            Usage = "Mix 3g into 2 teaspoons of water and give 1ml of solution per 100grams of body weight.",
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Aureomycin",
                            Usage = "1/4 teaspoon to 1 quart of water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Penicillin",
                            Usage = "Mix 1/4 teaspoon to 1 gallon of water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Calciboost",
                            Usage = "In water (10-20 mls per liter) or on soft-food 0.1-0.2 mls per 100g bodyweight. ",
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "CocciPlus",
                            Usage = "use 1/2 teaspoon to 1 gallon of water.",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Name = "Colloidal Silver",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Name = "Doxyvet Liquid",
                            Usage = "Use at the rate of 1ml (20 drops) in 100ml of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Name = "Endocox Powder",
                            Usage = "1 teaspoon (5 grams) per 1 gallon of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Name = "Dextrotonic",
                            Usage = "15ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Name = "Acox",
                            Usage = "6ml per liter of drinking water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Name = "Enrofloxacin 10%",
                            Usage = "Mix 1 tsp. per 1 Gallon of water",
                            UserId = new Guid("00000000-0000-0000-0000-000000000009")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            EndDate = new DateTime(2022, 1, 14, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3413),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 296, DateTimeKind.Local).AddTicks(3819),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            EndDate = new DateTime(2022, 1, 11, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3718),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000002"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3704),
                            UserId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            EndDate = new DateTime(2022, 1, 14, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3737),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000003"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3734),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            EndDate = new DateTime(2022, 1, 11, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3748),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000004"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3745),
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            EndDate = new DateTime(2022, 1, 13, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3757),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000005"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3754),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            EndDate = new DateTime(2022, 1, 11, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3766),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000006"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3763),
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            EndDate = new DateTime(2022, 1, 9, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3774),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000007"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3771),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            EndDate = new DateTime(2022, 1, 18, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3783),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000008"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3780),
                            UserId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            EndDate = new DateTime(2022, 1, 12, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3792),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000009"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3789),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            EndDate = new DateTime(2022, 1, 11, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3801),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000010"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3799),
                            UserId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            EndDate = new DateTime(2022, 1, 11, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3812),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000011"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3809),
                            UserId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            EndDate = new DateTime(2022, 1, 14, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3820),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000012"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3818),
                            UserId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            EndDate = new DateTime(2022, 1, 11, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3829),
                            MedicineId = new Guid("00000000-0000-0000-0000-000000000013"),
                            StartDate = new DateTime(2022, 1, 7, 0, 26, 25, 299, DateTimeKind.Local).AddTicks(3826),
                            UserId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "The cockatiel (Nymphicus hollandicus), also known as weiro bird, or quarrion, is a medium sized parrot that is a member of its own branch of the cockatoo family endemic to Australia. They are prized as household pets and companion parrots throughout the world and are relatively easy to breed. As a caged bird, cockatiels are second in popularity only to the budgerigar.",
                            Image = "images/species/cockatiel.jpg",
                            Name = "Cockatiel",
                            ScientificName = "Nymphicus hollandicuss"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "The budgerigar , also known as the common parakeet or shell parakeet, is a small, long-tailed, seed-eating parrot usually nicknamed the budgie, or in American English, the parakeet. Budgies are the only species in the genus Melopsittacus. Naturally, the species is green and yellow with black, scalloped markings on the nape, back, and wings. Budgies are bred in captivity with colouring of blues, whites, yellows, greys, and even with small crests.",
                            Image = "images/species/budgie.jpg",
                            Name = "Budgerigar",
                            ScientificName = "Melopsittacus undulatus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Image = "images/species/zebrafinch.jpg",
                            Name = "Zebra finch",
                            ScientificName = "Taeniopygia guttata"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Canary",
                            ScientificName = "Serinus canaria forma domestica"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Name = "Pacific parrotlet",
                            ScientificName = "Forpus coelestis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Name = "Bourke’s parrot",
                            ScientificName = "Neopsephotus bourkii"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Name = "Rosy-faced lovebrid",
                            ScientificName = "Agapornis roseicollis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Name = "Green-Cheeked Conure",
                            ScientificName = "Pyrrhura molinae"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Name = "Gouldian finch",
                            ScientificName = "Chloebia gouldiae"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Name = "Society finch",
                            ScientificName = "Lonchura striata domestica"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ConcurrencyStamp = "7c8e110a-2b33-41b9-83a0-b2450dabdabe",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ConcurrencyStamp = "3f496e18-ea14-423b-b4cc-38da5721dded",
                            Name = "BaseUser",
                            NormalizedName = "BASEUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Bird", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("Birds")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.Species", "Species")
                        .WithMany("Birds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Birds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BirdPrescription", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Bird", "Bird")
                        .WithMany("BirdPrescriptions")
                        .HasForeignKey("BirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Prescription", "Prescription")
                        .WithMany("BirdPrescriptions")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Cage", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Cages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DailyTask", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Cage", "Cage")
                        .WithMany("DailyTasks")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Medicine", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Medicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Prescription", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Medicine", "Medicine")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
