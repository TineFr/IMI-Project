




@if (!quizEnded)
{

<div class="question"><h3>@question.Question</h3></div>
<img class="questionImage" src="@question.Image">
<div class="itemscontainer">

    @foreach (var answer in question.PossibleAnswers)
    {
        <button @onclick="() => AnswerPicked(answer, question.CorrectAnswer)"class="item">
            @answer
        </button>
    }

</div>
}

else
{
    <QuizEndView Score="count"></QuizEndView>
}


@code {

    private bool quizEnded = false;

    private int count;

    [Inject]
    public IQuizService QuizService { get; set; }

    public QuizElement question;

    protected async override Task OnInitializedAsync()
    {
        question = await ReturnQuestion();
        await base.OnInitializedAsync();
    }

    List<int> askedQuestions = new List<int>();

    private bool CheckIfCorrect(string choice, string answer)
    {
        return choice == answer;
    }

    public async Task<QuizElement> ReturnQuestion()
    {
        int rndQuestion;
        if (askedQuestions.Count < 5)
        {
            Random rnd = new Random();
            var questions = await QuizService.GetAllAsync();
            do
            {
                rndQuestion = rnd.Next(questions.Count());
            } while (askedQuestions.Contains(rndQuestion));
            askedQuestions.Add(rndQuestion);
            return questions.ToArray()[rndQuestion];
        }
        else
        {
            quizEnded = true;
            return null;
        }
    }



    public async void AnswerPicked(string answer, string correctAnswer)
    {

        if (answer == correctAnswer) count += 1;
        question = await ReturnQuestion();
    }


}
